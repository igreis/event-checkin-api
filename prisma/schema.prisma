// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Event {
  id               String     @id @default(uuid()) //id -> primary key, uuid() -> gerar valor aleatorio e unico 
  title            String
  details          String? // ? -> campo opcional
  slug             String     @unique //indice unico
  maximumAttendees Int?       @map("maximim_atendees")
  attendees        Attendee[] //para cada evento existe varios participantes(attendees)

  @@map("events") //nome da tabela
}

model Attendee {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  createdAt DateTime @default(now()) @map("created_at") //preencher automatico com a data atual
  eventId   String   @map("event_id")

  //onDelete -> quando participante for deletado ele vai apagar o checkin
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade) //define o relacionamento entre event e attendee com a chave estrangeira(eventId)
  checkIn CheckIn? //relaçao de um para um, apenas um checkin por participante, e o checkin é opcional

  @@unique([eventId, email]) // permite apenas um email por evento(eventId), combinaçao dos valores event e email deve ser unicos
  @@map("attendees")
}

model CheckIn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") //preencher automatico com a data atual

  //onDelete -> quando participante for deletado ele vai apagar o checkin
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade) //relaçao de um para um, apenas um checkin por participante
  attendeeId Int      @unique @map("attendee_id")
}
